name: "Image Scan"
description: "Image Scan Composite Action"

inputs:
  github-token:
    required: true
  image-ref:
    required: true
  slack-incoming-webhook-url:
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Run Trivy vulnerability scanner
      id: image-scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.image-ref }}
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os'
        severity: 'CRITICAL'
        output: 'trivy-results-raw.txt'

    - name: Output step summary
      if: failure()
      shell: bash
      run: |
        export BRANCH="${{ github.head_ref || github.ref_name }}"
        export REVISION="${{ github.event.pull_request.head.sha || github.sha }}"
        export TRIVY_RESULTS=`cat trivy-results-raw.txt`
        envsubst < ./tmp/.github/actions/image-scan/results.tmpl > trivy-results.txt
        cat trivy-results.txt >> $GITHUB_STEP_SUMMARY

    - name: Create issue
      # TODO: cronで実行するようにしたらこっちを有効化する
      # if: github.event.schedule != '' && failure()
      if: github.event.schedule == '' && failure()
      shell: bash
      run: |
        ISSUE_NUM=`gh issue list --search "trivy sort:updated-desc " --state open --limit 1 --label image-vulnerability --json number --jq ".[].number"`
        if [ -n "$ISSUE_NUM" ]; then
          gh issue edit $ISSUE_NUM -F trivy-results.txt
        else
          gh issue create -t "trivy result" -F trivy-results.txt -l image-vulnerability
        fi
        ISSUE_URL=`gh issue list --search "trivy sort:updated-desc " --state open --limit 1 --label image-vulnerability --json url --jq ".[].url"`
        echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV

      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Send to Slack
      # TODO: cronで実行するようにしたらこっちを有効化する
      # if: github.event.schedule != '' && failure()
      if: github.event.schedule == '' && failure()
      id: slack
      uses: slackapi/slack-github-action@v1.23
      with:
        payload: |
          {
            "text": ":parrot: コンテナイメージに脆弱性が見つかりました ${{ env.ISSUE_URL }}"
          }
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack-incoming-webhook-url }}